{"version":3,"sources":["images/Logo.svg","images/Component 6-1.svg","images/Path1.svg","images/Path2.svg","images/Path3.svg","images/Path4.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","OuterWrapper","styled","div","MainWrapper","LoginWrapper","FormWrapper","TopLeftImage","img","TopRightImage","BottomLeftImage","BottomRightImage","App","src","Path1","Path2","Path4","Path3","monster","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,wrECS3C,IAAMC,EAAeC,IAAOC,IAAV,KAMZC,EAAcF,IAAOC,IAAV,KAOXE,EAAeH,IAAOC,IAAV,KAiCZG,EAAcJ,IAAOC,IAAV,KA6BXI,EAAeL,IAAOM,IAAV,KAMZC,EAAgBP,IAAOM,IAAV,KAMbE,EAAkBR,IAAOM,IAAV,KAMfG,EAAmBT,IAAOM,IAAV,KA+BPI,MAxBf,WACE,OACE,kBAACX,EAAD,KACE,kBAACG,EAAD,KACE,kBAACG,EAAD,CAAcM,IAAKC,MACnB,kBAACL,EAAD,CAAeI,IAAKE,MACpB,kBAACL,EAAD,CAAiBG,IAAKG,MACtB,kBAACL,EAAD,CAAkBE,IAAKI,MACvB,kBAACZ,EAAD,KACE,6DACA,6CACA,yBAAKQ,IAAKK,MACV,kBAACZ,EAAD,KACE,oDACA,gCACA,oDAEF,yBAAKO,IAAKM,UClHAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7e32467f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.14d27071.svg\";","module.exports = __webpack_public_path__ + \"static/media/Component 6-1.b84bf966.svg\";","module.exports = __webpack_public_path__ + \"static/media/Path1.3278ef47.svg\";","module.exports = __webpack_public_path__ + \"static/media/Path2.b8fb9549.svg\";","module.exports = __webpack_public_path__ + \"static/media/Path3.50484731.svg\";","module.exports = __webpack_public_path__ + \"static/media/Path4.31ddd4d9.svg\";","import React from 'react';\r\nimport logo from './images/Logo.svg';\r\nimport monster from './images/Component 6-1.svg';\r\nimport styled from 'styled-components';\r\nimport Path1 from './images/Path1.svg';\r\nimport Path2 from './images/Path2.svg';\r\nimport Path3 from './images/Path3.svg';\r\nimport Path4 from './images/Path4.svg';\r\n\r\nconst OuterWrapper = styled.div`\r\n  height:100vh;\r\n  background:#000000;\r\n\r\n`;\r\n\r\nconst MainWrapper = styled.div`\r\n  display:flex;\r\n  justify-content:center;\r\n  flex-direction:column;\r\n  height:inherit;\r\n`;\r\n\r\nconst LoginWrapper = styled.div`\r\n  border:2px solid #ffffff;\r\n  display:flex;\r\n  flex-direction:column;\r\n  justify-content:flex-start;\r\n  align-items: center;\r\n  padding:1vh 5vw;\r\n  width: 250px;\r\n  height: 360px;\r\n  margin: auto;\r\n  p:nth-child(1)  {\r\n    color:#66EAD5;\r\n    font-size:14px;\r\n  }\r\n  p:nth-child(2)  {\r\n    color:#FFFFFF;\r\n    font-size:28px;\r\n    margin-top:-5px;\r\n  }\r\n  img {\r\n    width:50px;\r\n    pointer-events:none;\r\n  }\r\n  img:last-child {\r\n    position: absolute;\r\n    top: 0px;\r\n    margin:auto;\r\n    width:120px;\r\n    height:150px;\r\n    pointer-events:none;\r\n  }\r\n`;\r\n\r\nconst FormWrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width: 20vw;\r\n  margin:5px;\r\n  * {\r\n    margin:10px;\r\n  }\r\n  label {\r\n    font-size:14px;\r\n    color: #FFFFFF;\r\n  }\r\n  input {\r\n    background: #FFFFFF 0% 0% no-repeat padding-box;\r\n    border: 2px #707070;\r\n    opacity: 1;\r\n    padding:10px;\r\n  }\r\n  button {\r\n    background: #66EAD5 0% 0% no-repeat padding-box;\r\n    opacity: 1;\r\n    color:#1D1D1D;\r\n    letter-spacing: 0;\r\n    padding:10px;\r\n    font-weight:600;\r\n    border:2px #66EAD5;\r\n  }\r\n`;\r\n\r\nconst TopLeftImage = styled.img`\r\n  position: fixed;\r\n  top: -36vh;\r\n  left: -52px;\r\n`;\r\n\r\nconst TopRightImage = styled.img`\r\n    position: fixed;\r\n    top: -36vh;\r\n    right: -200px;\r\n`;\r\n\r\nconst BottomLeftImage = styled.img`\r\n    position: fixed;\r\n    top: 59vh;\r\n    left: -135px;\r\n`;\r\n\r\nconst BottomRightImage = styled.img`\r\n    position: fixed;\r\n    top: 59vh;\r\n    right: -445px;\r\n`;\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <OuterWrapper>\r\n      <MainWrapper>\r\n        <TopLeftImage src={Path1} />\r\n        <TopRightImage src={Path2} />\r\n        <BottomLeftImage src={Path4} />\r\n        <BottomRightImage src={Path3} /> \r\n        <LoginWrapper>\r\n          <p>You are invited to a chat room</p>\r\n          <p>Aurora Hunters</p>\r\n          <img src={monster} />\r\n          <FormWrapper>\r\n            <label>What's your name?</label>\r\n            <input />\r\n            <button>Letâ€™s Chat</button>\r\n          </FormWrapper>\r\n          <img src={logo} />\r\n        </LoginWrapper>\r\n      </MainWrapper>\r\n    </OuterWrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}